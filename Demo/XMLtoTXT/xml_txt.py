# -*- coding: utf-8 -*-
"""XML_TXT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mRRtDOkd4XDiAZ0DoEUDOhol-8GJquYz

## Converting XML to TXT 

This is a Python code that will help to transform XML files into TXT files.

Helpful Sources:
- [The ElementTree XML API](https://docs.python.org/2/library/xml.etree.elementtree.html)
- [Python parse XML and save as txt](https://stackoverflow.com/questions/19772288/python-parse-xml-and-save-as-txt)


If you don't want to go on with the code here is the [online converter](https://products.groupdocs.app/conversion/xml-to-txt) :)
"""

import xml.etree.ElementTree as ET

"""### The ElementTree XML API

XML is an inherently hierarchical data format, and the most natural way to represent it is with a tree. ET has two classes for this purpose `ElementTree` represents the whole XML document as a tree, and `Element` represents a single node in this tree. Interactions with the whole document (reading and writing to/from files) are usually done on the `ElementTree` level. Interactions with a single XML element and its sub-elements are done on the `Element` level.

The `Element` type is a flexible container object, designed to store hierarchical data structures in memory. The type can be described as a cross between a list and a dictionary.Each element has a number of properties associated with it:
- A tag which is a string identifying what kind of data this element represents (the element type, in other words).
- A number of attributes, stored in a Python dictionary.
- A text string.
- An optional tail string.
- A number of child elements, stored in a Python sequence.

The `ElementTree` class can be used to wrap an element structure, and convert it from and to XML.

### Parsing XML
"""

xml_path = '/content/drive/MyDrive/annotation.xml'
tree = ET.parse(xml_path)
print(tree)
root = tree.getroot()
print(root.tag, root.attrib)

"""This is the XML file used for this tutorial. It is based on the output of the [LabelImg](https://github.com/heartexlabs/labelImg) tool.
```
<?xml version="1.0"?>
<annotation>
    <folder>Pictures</folder>
    <filename>taipei101</filename>
    <path>/home/darrenl/Pictures/taipei101.jpeg</path>
    <source>
        <database>Unknown</database>
    </source>
    <size>
        <width>236</width>
        <height>354</height>
        <depth>3</depth>
    </size>
    <segmented>0</segmented>
    <object>
        <name>build</name>
        <pose>Unspecified</pose>
        <truncated>0</truncated>
        <difficult>0</difficult>
        <bndbox>
            <xmin>23</xmin>
            <ymin>26</ymin>
            <xmax>129</xmax>
            <ymax>308</ymax>
        </bndbox>
    </object>
</annotation>
```

#### Importing Data

There are number of ways to import data:
1. Reading the file from disk
```
tree = ET.parse('data.xml')
root = tree.getroot()
```
2. Reading the data from a string
```
root = ET.fromstring(data_as_string)
```
  `fromstring()` parses XML from a string directly into an Element, which is the root element of the parsed tree.

As an Element, root has a tag and a dictionary of attributes such as `tag` and `attrib`.
"""

#iterating over children nodes of root
for child in root:
  print(child.tag, child.attrib)

"""### Finding Intresting Elements"""

f = open('bndbox_txt','w') #Creates a new file
f.write('name left top right bottom\n')
f.close()

for ann in root.iter('annotation'):
  filename = ann.find('filename').text
  left = ann.find('object/bndbox/xmin').text
  right = ann.find('object').find('bndbox').find('xmax').text
  bottom = ann.find('object').find('bndbox').find('ymin').text
  top = ann.find('object').find('bndbox').find('ymax').text
  line_to_write = filename + ' ' + left + ' ' + top + ' ' + right + ' ' + bottom + '\n'
  with open('bndbox_txt', 'a') as f:
    f.write(line_to_write)

"""- *Element.iter()*

  Element has some useful methods that help iterate recursively over all the sub-tree below it (its children, their children, and so on)

- *Element.findall()*

 Finds only elements with a tag which are direct children of the current element. 

- *Element.find()*
  
  Finds the first child with a particular tag, and Element.text accesses the element’s text content.
  
- *Element.get()* 

  Accesses the element’s attributes

Note: Pay attention that there was no output in the text file when using `root.findall` instead of `root.iter`.

"""